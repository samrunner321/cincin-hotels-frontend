// @ts-nocheck
/**
 * MembershipForm Component
 * 
 * A comprehensive form for hotel membership applications in CinCin Hotels application
 * with validation, submission handling, and responsive layout.
 */

import React from 'react';
import Link from 'next/link';
import { motion } from 'framer-motion';
import { useComplexForm } from '../../hooks/useComplexForm';
import { useAnimation } from '../../hooks/useAnimation';
import { useRtl } from '../../hooks/useRtl';
import { MembershipFormProps, MembershipFormData } from '../../types/advanced-ui';

/**
 * Email validation regex
 */
const EMAIL_REGEX = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;

/**
 * URL validation regex
 */
const URL_REGEX = /^(https?:\/\/)?(www\.)?([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(\/[a-zA-Z0-9-._~:/?#[\]@!$&'()*+,;=]*)?$/;

/**
 * MembershipForm component for hotel membership applications
 */
const MembershipForm: React.FC<MembershipFormProps> = ({
  endpoint = '/api/membership',
  onSubmitSuccess,
  onSubmitError,
  initialValues,
  validate,
  className = '',
  style,
  id,
  visible = true,
  rtlAware = true,
}) => {
  // RTL support
  const { isRtl, direction } = useRtl();
  
  // Animation configuration
  const { getEntranceProps, getStaggerProps } = useAnimation();
  
  // Form validation function
  const validateForm = (values: MembershipFormData) => {
    const errors: Record<string, string | null> = {};
    
    // First name validation
    if (!values.firstName || values.firstName.trim() === '') {
      errors.firstName = 'First name is required';
    }
    
    // Last name validation
    if (!values.lastName || values.lastName.trim() === '') {
      errors.lastName = 'Last name is required';
    }
    
    // Hotel name validation
    if (!values.hotelName || values.hotelName.trim() === '') {
      errors.hotelName = 'Hotel name is required';
    }
    
    // Email validation
    if (!values.email || values.email.trim() === '') {
      errors.email = 'Email address is required';
    } else if (!EMAIL_REGEX.test(values.email)) {
      errors.email = 'Please enter a valid email address';
    }
    
    // Website validation
    if (!values.website || values.website.trim() === '') {
      errors.website = 'Website URL is required';
    } else if (!URL_REGEX.test(values.website)) {
      errors.website = 'Please enter a valid website URL';
    }
    
    // Terms agreement validation
    if (!values.agreeToTerms) {
      errors.agreeToTerms = 'You must agree to the terms and conditions';
    }
    
    // Use custom validation if provided
    if (validate) {
      const customErrors = validate(values);
      return { ...errors, ...customErrors };
    }
    
    return errors;
  };
  
  // Initialize form with complex form hook
  const {
    values,
    errors,
    touched,
    status,
    submitError,
    isValid,
    handleChange,
    handleBlur,
    getFieldProps,
    submitForm,
  } = useComplexForm<MembershipFormData>({
    initialValues: initialValues || {
      firstName: '',
      lastName: '',
      hotelName: '',
      email: '',
      phone: '',
      website: '',
      about: '',
      agreeToTerms: false,
    },
    validate: validateForm,
    validateOnChange: true,
    validateOnBlur: true,
    validateOnSubmit: true,
    onSubmit: async (formValues) => {
      try {
        const response = await fetch(endpoint, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formValues),
        });
        
        if (!response.ok) {
          const errorData = await response.json();
          throw new Error(errorData.message || 'Something went wrong');
        }
        
        if (onSubmitSuccess) {
          onSubmitSuccess();
        }
      } catch (error) {
        if (onSubmitError) {
          onSubmitError(error instanceof Error ? error.message : 'An error occurred');
        }
        throw error;
      }
    },
    onError: (error) => {
      if (onSubmitError) {
        onSubmitError(error instanceof Error ? error.message : 'An error occurred');
      }
    },
  });
  
  // Helper for displaying field errors
  const getFieldError = (field: keyof MembershipFormData): string | null => {
    return touched[field] && errors[field] ? errors[field] : null;
  };
  
  // Exit early if not visible
  if (!visible) {
    return null;
  }
  
  // Show success message after form submission
  if (status === 'success') {
    return (
      <motion.div 
        className="max-w-lg mx-auto p-8"
        {...getEntranceProps()}
      >
        <h2 className="text-2xl font-normal mb-4">Thank you for your application</h2>
        <p className="mb-6">We've received your application and will be in touch shortly.</p>
        <Link href="/" className="text-black underline">
          Return to homepage
        </Link>
      </motion.div>
    );
  }
  
  return (
    <div
      className={`grid md:grid-cols-2 gap-16 py-16 px-4 max-w-7xl mx-auto ${className}`}
      style={style}
      id={id}
      dir={rtlAware ? direction : undefined}
    >
      {/* Left side - Heading */}
      <motion.div {...getEntranceProps()}>
        <h1 className="text-4xl md:text-5xl font-normal mb-6">
          Apply now to become a member of CinCin Hotels.
        </h1>
        <p className="text-lg text-gray-700 mb-6">
          Join our exclusive collection of boutique hotels and enjoy the benefits of being part of the CinCin Hotels family.
        </p>
      </motion.div>
      
      {/* Right side - Form */}
      <div>
        {submitError && (
          <motion.div 
            className="mb-6 p-4 bg-red-50 text-red-800 rounded-md"
            {...getEntranceProps()}
          >
            {submitError}
          </motion.div>
        )}
        
        <p className="text-sm text-gray-600 mb-6">* Required fields</p>
        
        <form onSubmit={(e) => { e.preventDefault(); submitForm(); }} className="space-y-6">
          {/* Row with First name and Last name */}
          <motion.div 
            className="grid md:grid-cols-2 gap-6"
            {...getStaggerProps(0)}
          >
            <div>
              <div className="relative">
                <input
                  type="text"
                  id="firstName"
                  className={`w-full border-b ${getFieldError('firstName') ? 'border-red-500' : 'border-gray-300'} py-2 px-0 focus:outline-none focus:border-black`}
                  placeholder="First name*"
                  aria-required="true"
                  aria-invalid={!!getFieldError('firstName')}
                  {...getFieldProps('firstName')}
                />
                {getFieldError('firstName') && (
                  <p className="mt-1 text-sm text-red-600">{getFieldError('firstName')}</p>
                )}
              </div>
            </div>
            <div>
              <div className="relative">
                <input
                  type="text"
                  id="lastName"
                  className={`w-full border-b ${getFieldError('lastName') ? 'border-red-500' : 'border-gray-300'} py-2 px-0 focus:outline-none focus:border-black`}
                  placeholder="Last name*"
                  aria-required="true"
                  aria-invalid={!!getFieldError('lastName')}
                  {...getFieldProps('lastName')}
                />
                {getFieldError('lastName') && (
                  <p className="mt-1 text-sm text-red-600">{getFieldError('lastName')}</p>
                )}
              </div>
            </div>
          </motion.div>
          
          {/* Hotel name */}
          <motion.div {...getStaggerProps(1)}>
            <div className="relative">
              <input
                type="text"
                id="hotelName"
                className={`w-full border-b ${getFieldError('hotelName') ? 'border-red-500' : 'border-gray-300'} py-2 px-0 focus:outline-none focus:border-black`}
                placeholder="Hotel name*"
                aria-required="true"
                aria-invalid={!!getFieldError('hotelName')}
                {...getFieldProps('hotelName')}
              />
              {getFieldError('hotelName') && (
                <p className="mt-1 text-sm text-red-600">{getFieldError('hotelName')}</p>
              )}
            </div>
          </motion.div>
          
          {/* Email address */}
          <motion.div {...getStaggerProps(2)}>
            <div className="relative">
              <input
                type="email"
                id="email"
                className={`w-full border-b ${getFieldError('email') ? 'border-red-500' : 'border-gray-300'} py-2 px-0 focus:outline-none focus:border-black`}
                placeholder="Email address*"
                aria-required="true"
                aria-invalid={!!getFieldError('email')}
                {...getFieldProps('email')}
              />
              {getFieldError('email') && (
                <p className="mt-1 text-sm text-red-600">{getFieldError('email')}</p>
              )}
            </div>
          </motion.div>
          
          {/* Phone number */}
          <motion.div {...getStaggerProps(3)}>
            <div className="relative">
              <input
                type="tel"
                id="phone"
                className="w-full border-b border-gray-300 py-2 px-0 focus:outline-none focus:border-black"
                placeholder="Phone number"
                {...getFieldProps('phone')}
              />
            </div>
          </motion.div>
          
          {/* Hotel website */}
          <motion.div {...getStaggerProps(4)}>
            <div className="relative">
              <div className="absolute inset-y-0 left-0 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="text-gray-400">
                  <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
                  <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
                </svg>
              </div>
              <input
                type="url"
                id="website"
                className={`w-full border-b ${getFieldError('website') ? 'border-red-500' : 'border-gray-300'} py-2 pl-6 focus:outline-none focus:border-black`}
                placeholder="Hotel website*"
                aria-required="true"
                aria-invalid={!!getFieldError('website')}
                {...getFieldProps('website')}
              />
              {getFieldError('website') && (
                <p className="mt-1 text-sm text-red-600">{getFieldError('website')}</p>
              )}
            </div>
          </motion.div>
          
          {/* About property */}
          <motion.div {...getStaggerProps(5)}>
            <div className="relative">
              <textarea
                id="about"
                className="w-full border border-gray-300 p-3 focus:outline-none focus:border-black rounded-md"
                placeholder="Tell us about your property"
                rows={6}
                {...getFieldProps('about')}
              ></textarea>
            </div>
          </motion.div>
          
          {/* Terms agreement */}
          <motion.div {...getStaggerProps(6)}>
            <div className="flex items-start">
              <div className="flex items-center h-5">
                <input
                  type="checkbox"
                  id="agreeToTerms"
                  className={`h-4 w-4 ${getFieldError('agreeToTerms') ? 'border-red-500' : 'border-gray-300'} rounded`}
                  aria-required="true"
                  aria-invalid={!!getFieldError('agreeToTerms')}
                  {...getFieldProps('agreeToTerms')}
                />
              </div>
              <div className="ml-3 text-sm">
                <label htmlFor="agreeToTerms" className="text-gray-700">
                  I agree to the CinCin Hotels Terms & Conditions and have read the Privacy Policy. *
                </label>
                {getFieldError('agreeToTerms') && (
                  <p className="mt-1 text-sm text-red-600">{getFieldError('agreeToTerms')}</p>
                )}
              </div>
            </div>
          </motion.div>
          
          {/* Submit button */}
          <motion.div {...getStaggerProps(7)}>
            <button
              type="submit"
              disabled={status === 'submitting'}
              className="bg-black text-white px-8 py-3 rounded-md flex items-center hover:bg-gray-800 transition-colors disabled:opacity-70"
            >
              {status === 'submitting' ? 'Submitting...' : 'Submit'}
              {status !== 'submitting' && (
                <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round" className="ml-2 h-4 w-4">
                  <line x1="5" y1="12" x2="19" y2="12"></line>
                  <polyline points="12 5 19 12 12 19"></polyline>
                </svg>
              )}
            </button>
          </motion.div>
        </form>
      </div>
    </div>
  );
};

export default MembershipForm;